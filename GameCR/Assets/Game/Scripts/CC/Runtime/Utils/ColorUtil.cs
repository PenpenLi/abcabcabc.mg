// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace CC.Runtime.Utils
{
	public static class ColorUtil
	{
		//黑、白、绿、蓝、紫、橙
		public static readonly int BLACK = 0;
		public static readonly int WHITE = 1;
		public static readonly int GREEN = 2;
		public static readonly int BLUE = 3;
		public static readonly int VIOLET = 4;
		public static readonly int ORANGE = 5;
		public static readonly int RED = 6;
		public static readonly int MULTICOLOR = 7;
		public static readonly string[] ColorStrings = new string[]{"000000", "FFFFFF", "47AF2F", "10AFEA", "EE73F3", "E88d21", "FF645C", "E0E0E0"};
		public static readonly Color[] ColorNums = new Color[]{ToColor(0x000000), ToColor(0xFFFFFF), ToColor(0x47AF2F), ToColor(0x10AFEA), ToColor(0xEE73F3), ToColor(0xE88d21), ToColor(0xFF645C), ToColor(0xE0E0E0)};

   
		public static Color ToColor(this int num)
		{
			float r,  g,  b;
//			r = num & 0xFF;
//			g = (num & 0xFFFF) >> 8;
//			b = (num & 0xFFFFFF) >> 16;


			b = num & 0xFF;
			g = (num & 0xFFFF) >> 8;
			r = (num & 0xFFFFFF) >> 16;

			return new Color(r / 255f, g / 255f, b /255f);
		}

		public static Color ToColor32(this int num)
		{
			float r,  g,  b, a;
			a = num & 0xFF;
			b = (num & 0xFFFF) >> 8;
			g = (num & 0xFFFFFF) >> 16;
			r = num >> 24;
			return new Color(r / 255f, g / 255f, b / 255f, a / 255f);
		}

		//=============================
		public static string ToStr(this Color src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 16 | Mathf.FloorToInt(src.g * 255) << 8 | Mathf.FloorToInt(src.b * 255);
			return  "#" + Convert.ToString(num, 16);
		}
		
		
		public static string ToStr0x(this Color src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 16 | Mathf.FloorToInt(src.g * 255) << 8 | Mathf.FloorToInt(src.b * 255);
			return  "0x" + Convert.ToString(num, 16);
		}

		//--------------------------
		public static string ToStr32(this Color src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 24 | Mathf.FloorToInt(src.g * 255) << 16 | Mathf.FloorToInt(src.b * 255) << 8 | Mathf.FloorToInt(src.a * 255);
			return  "#" + Convert.ToString(num, 16);
		}
		
		
		public static string ToStr320x(this Color src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 24 | Mathf.FloorToInt(src.g * 255) << 16 | Mathf.FloorToInt(src.b * 255) << 8 | Mathf.FloorToInt(src.a * 255);
			return  "0x" + Convert.ToString(num, 16);
		}
		
		//=============================
		
		public static string ToStr(this Color32 src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 16 | Mathf.FloorToInt(src.g * 255) << 8 | Mathf.FloorToInt(src.b * 255);
			return  "#" + Convert.ToString(num, 16);
		}
		
		
		public static string ToStr0x(this Color32 src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 16 | Mathf.FloorToInt(src.g * 255) << 8 | Mathf.FloorToInt(src.b * 255);
			return  "0x" + Convert.ToString(num, 16);
		}
		
		//--------------------------
		public static string ToStr32(this Color32 src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 24 | Mathf.FloorToInt(src.g * 255) << 16 | Mathf.FloorToInt(src.b * 255) << 8 | Mathf.FloorToInt(src.a * 255);
			return  "#" + Convert.ToString(num, 16);
		}
		
		
		public static string ToStr320x(this Color32 src)
		{
			int num = Mathf.FloorToInt(src.r * 255) << 24 | Mathf.FloorToInt(src.g * 255) << 16 | Mathf.FloorToInt(src.b * 255) << 8 | Mathf.FloorToInt(src.a * 255);
			return  "0x" + Convert.ToString(num, 16);
		}
		
		//=============================

		public static int PotentialToColorID(int potential)
		{
			/*
			"id":9,
			"name":"颜色所需潜力值（白色，绿色，蓝色，紫色，橙色）",
			"value":[50,60,70,80,90],
			"id":10,
			"name":"颜色对应id（白色，绿色，蓝色，紫色，橙色）",
			"value":[1,2,3,4,5],
			*/

			if(potential <= 50)
			{
				return WHITE;
			}
			else if(potential <= 60)
			{
				return GREEN;
			}
			else if(potential <= 70)
			{
				return BLUE;
			}
			else if(potential <= 80)
			{
				return VIOLET;
			}
			else 
			{
				return ORANGE;
			}
		}

        public static Color GetColorByItemQuality( int i ) {
            return ColorNums[i + 2];
        }

        public static string GetColorStringByItemQuality(int i) {
            return ColorStrings[i + 2];
        }

		public static Color Clone(this Color src)
		{
			return new Color(src.r, src.g, src.b, src.a);
		}

		
		public static Color SetAlhpa(this Color src, float a)
		{
			src.a = a;
			return src;
		}
	}
}

