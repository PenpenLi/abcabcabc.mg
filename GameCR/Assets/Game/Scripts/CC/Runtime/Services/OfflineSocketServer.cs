//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using CC.Runtime.PB;
using ProtoBuf;
using CC.Runtime.signals;

namespace CC.Runtime
{
    public class OfflineSocketServer : ISocketServer
    {
        private SocketManager sm ;
        private SocketId sid;
        private List<ReadData> readdata;
		private SimplePool<ReadData> readpool;
//		public ManangerRoot root;
		public HSignal<SocketId> sConnect = new HSignal<SocketId>();

        public OfflineSocketServer(SocketManager sm, SocketId sid){
            this.sm = sm;
            this.sid = sid;
            readpool = SimplePool<ReadData>.Instance;
            InitHandlers();
            readdata = new List<ReadData>();
        }

        public IEnumerable<ReadData> OnFrame()
        {
            foreach(var rd in readdata){
                yield return rd;
            }
            readdata.Clear();
        }
        public void Start()
        {
			sConnect.Dispatch(sid);
        }
        public void SendProtoMessage(int id, System.IO.Stream stream)
        {
            stream.Dispose();
            FakeHandle(id);
        }
        
        public void SendEmptyMessage(int id)
        {
            FakeHandle(id);
        }

        private void FakeHandle(int id){
            Action ac ;
            if( handlers.TryGetValue(id,out ac) ){
                ac();
            }
        }
        
        private void InitHandlers(){
            handlers = new Dictionary<int, Action>();
            handlers.Add(1,HandleLogin);
        }
        
        private Dictionary<int,Action> handlers;
        //handler
        private void HandleLogin(){
//            EchoProto_DEF<S_User_Login_0x01>(1);
        }
        
        private void EchoProto<T>( int i, T msg ){
            ReadData rd = readpool.Get();
            rd.proto = i;
            rd.stream.Seek(0,System.IO.SeekOrigin.Begin);
            Serializer.Serialize<T>(rd.stream,msg);
            readdata.Add(rd);
        }
        
        private void EchoProto_DEF<T>( int i) where T:new(){
            T msg = new T() ;
            ReadData rd = readpool.Get();
            rd.proto = i;
            rd.stream.Seek(0,System.IO.SeekOrigin.Begin);
            Serializer.Serialize<T>(rd.stream,msg);
            readdata.Add(rd);
        }
    }
}

